import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';
import { Upload, Calendar, MapPin } from 'lucide-react';

type ConcessionFormProps = {
  onSuccess: () => void;
};

export const ConcessionForm: React.FC<ConcessionFormProps> = ({ onSuccess }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    year: '',
    category: '',
    branch: '',
    fromStation: '',
    toStation: '',
    classType: '',
    railwayType: '',
    passType: '',
    dateOfBirth: '',
    concessionFormNo: '',
    age: '',
    previousPassDate: '',
    previousPassExpiry: '',
    seasonTicketNo: ''
  });
  const [idCardFile, setIdCardFile] = useState<File | null>(null);
  const [aadharFile, setAadharFile] = useState<File | null>(null);
  const [feeReceiptFile, setFeeReceiptFile] = useState<File | null>(null);

  // Helper: calculate expiry based on passType
  const calculateExpiry = (issueDateStr: string, passType: string) => {
    if (!issueDateStr) return '';
    const issueDate = new Date(issueDateStr);
    const expiryDate = new Date(issueDate);

    if (passType === 'Monthly') {
      expiryDate.setDate(expiryDate.getDate() + 30);
    } else if (passType === 'Quarterly') {
      expiryDate.setMonth(expiryDate.getMonth() + 3);
    }

    return expiryDate.toISOString().split('T')[0];
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;

    setFormData(prev => {
      let updated = { ...prev, [name]: value };

      // Auto-calculate age from date of birth
      if (name === 'dateOfBirth' && value) {
        const birthDate = new Date(value);
        const today = new Date();
        const age = today.getFullYear() - birthDate.getFullYear();
        updated.age = age.toString();
      }

      // Auto-calculate expiry when issue date is set
      if (name === 'previousPassDate') {
        updated.previousPassExpiry = value
          ? calculateExpiry(value, prev.passType)
          : '';
      }

      // Also recalc expiry if pass type changes
      if (name === 'passType' && prev.previousPassDate) {
        updated.previousPassExpiry = calculateExpiry(prev.previousPassDate, value);
      }

      return updated;
    });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, fileType: 'id-card' | 'aadhar' | 'fee-receipt') => {
    if (e.target.files && e.target.files[0]) {
      switch (fileType) {
        case 'id-card':
          setIdCardFile(e.target.files[0]);
          break;
        case 'aadhar':
          setAadharFile(e.target.files[0]);
          break;
        case 'fee-receipt':
          setFeeReceiptFile(e.target.files[0]);
          break;
      }
    }
  };

  const uploadFile = async (file: File, bucket: string): Promise<string | null> => {
    const fileExt = file.name.split('.').pop();
    const fileName = `${user?.id}_${Date.now()}.${fileExt}`;
    
    const { error } = await supabase.storage
      .from(bucket)
      .upload(fileName, file);

    if (error) {
      console.error('File upload error:', error);
      return null;
    }

    const { data } = supabase.storage
      .from(bucket)
      .getPublicUrl(fileName);

    return data.publicUrl;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;

    setLoading(true);

    try {
      let idCardUrl = null;
      let aadharUrl = null;
      let feeReceiptUrl = null;
      
      if (idCardFile) {
        idCardUrl = await uploadFile(idCardFile, 'id-cards');
      }
      if (aadharFile) {
        aadharUrl = await uploadFile(aadharFile, 'aadhar-cards');
      }
      if (feeReceiptFile) {
        feeReceiptUrl = await uploadFile(feeReceiptFile, 'fee-receipts');
      }

      const { error } = await supabase
        .from('concession_applications')
        .insert([{
          student_id: user.id,
          student_name: user.name || '',
          year: formData.year,
          category: formData.category,
          branch: formData.branch,
          from_station: formData.fromStation,
          to_station: formData.toStation,
          class_type: formData.classType,
          railway_type: formData.railwayType,
          pass_type: formData.passType,
          date_of_birth: formData.dateOfBirth,
          concession_form_no: formData.concessionFormNo,
          age: parseInt(formData.age),
          previous_pass_date: formData.previousPassDate,
          previous_pass_expiry: formData.previousPassExpiry,
          season_ticket_no: formData.seasonTicketNo,
          id_card_url: idCardUrl,
          aadhar_url: aadharUrl,
          fee_receipt_url: feeReceiptUrl,
          status: 'pending'
        }]);

      if (error) throw error;

      // Reset form
      setFormData({
        year: '',
        category: '',
        branch: '',
        fromStation: '',
        toStation: '',
        classType: '',
        railwayType: '',
        passType: '',
        dateOfBirth: '',
        concessionFormNo: '',
        age: '',
        previousPassDate: '',
        previousPassExpiry: '',
        seasonTicketNo: ''
      });
      setIdCardFile(null);
      setAadharFile(null);
      setFeeReceiptFile(null);
      
      onSuccess();
      alert('Application submitted successfully!');
    } catch (error) {
      console.error('Error submitting application:', error);
      alert('Error submitting application. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-md">
      <div className="px-6 py-4 border-b border-gray-200">
        <h2 className="text-lg font-semibold text-gray-900">Train Concession Application Form</h2>
        <p className="text-sm text-gray-600">Fill in all required details for your concession application</p>
      </div>
      
      <form onSubmit={handleSubmit} className="p-6 space-y-6">
        {/* ... all your JSX fields remain unchanged ... */}
      </form>
    </div>
  );
};
